// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  username  String   @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts         Post[]
  likes         Like[]
  bookmarks     Bookmark[]
  shares        Share[]
  followers     Follow[] @relation("UserFollowers")
  following     Follow[] @relation("UserFollowing")
  notifications Notification[]
  views         View[]

  @@map("users")
}

model Post {
  id          String   @id @default(cuid())
  title       String
  content     String   // The actual prompt text
  model       String   // e.g., GPT-4, Stable Diffusion, etc.
  purpose     String   // e.g., code, image, writing, productivity
  tags        String[] // Array of tags for categorization
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Engagement metrics
  likesCount    Int @default(0)
  bookmarksCount Int @default(0)
  sharesCount   Int @default(0)
  viewsCount    Int @default(0)

  // Relations
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes    Like[]
  bookmarks Bookmark[]
  shares   Share[]
  views    View[]

  @@map("posts")
}

model Like {
  id     String @id @default(cuid())
  userId String
  postId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model Bookmark {
  id     String @id @default(cuid())
  userId String
  postId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("bookmarks")
}

model Share {
  id     String @id @default(cuid())
  userId String
  postId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("shares")
}

model View {
  id        String   @id @default(cuid())
  userId    String?
  postId    String
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post  @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("views")
  @@index([postId, createdAt])
}

model Follow {
  id          String @id @default(cuid())
  followerId   String
  followingId  String
  follower    User   @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User   @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // like, bookmark, follow, system
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Optional reference to related entities
  relatedUserId String?
  relatedPostId String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}